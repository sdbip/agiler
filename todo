# Features
+ Tasks (simple todos, engineering tasks, decisions to be made, seeking external help...)
* Stories (business value, show progress to a stakeholder)
- Features (business goals, marketable/testable/usable/lovable)
- Objectives and goals?
- Higher purpose of the product?

- Let tasks depend on other tasks
- Assign developers to tasks (we don't have developers yet)
- Prioritise features and stories
- Describe the purpose of a task (simple TODO item, done by an individual or a pair/mob)
- Mark tasks as started
- Use socket.io to remove finished tasks automatically

# Stories
* Make tasks children of stories
  - We don't use inProgress. Backend only requests notStarted items
  - Add Task to Story
  - Add text-box for adding a task to a story
  - Add chevron to collapse/expand a story
- Prioritise stories
- Finish task automatically when last task is done
- Add story details
- Allow story title to be changed
- Add text describing the purpose of a story
- Add text describing the purpose of a task
- Upgrade Story to Feature
- Split Feature

# Tasks

# Ice Box
- Why do some imports need `.js`?
- move frontend.ts to a different folder.
  The other code runs in the browser
- Publish to Heroku. Or somewhere else?
- Matcher/Specification pattern
- Design a reporter for Web Test Runner?
- Poll for events instead of pushing to Items table
  - Find new events by `position` > last processed
- Add back `task/` with a different implementation?
    “What are the available tasks that I could do right now?”
- No test fails if the client uses the wrong endpoints
  - Sure, when they're directly imported from run.js, but what about others. Only sometimes...
- There is an ESLint rule for enforcing file-extensions, but the resolver throws a fit 
    just from adding `plugin:import/recommended` ("eslint-plugin-import": "^2.26.0")
